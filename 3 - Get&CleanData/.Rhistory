load("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/.RData")
clean
clean()
clear()
library(rJava)
library(xlsx)
setwd("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/")
q3 <- read.xlsx("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata-data-DATA.gov_NGAP.xlsx")
q3 <- read.xlsx("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, header=TRUE)
sum(q3$Zip*q3$Ext,na.rm=T)
head(q3)
colIndex <- 7:15
rowIndex <- 18:23
q3 <- read.xlsx("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata-data-DATA.gov_NGAP.xlsx", sheetIndex=1, header=TRUE, colIndex=colIndex, rowIndex=rowIndex)
q3
sum(q3$Zip*q3$Ext,na.rm=T)
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
doc <- xmlTreeParse(fileURL, useInternal=TRUE)
?xmlTreeParse
doc <- xmlTreeParse(fileURL, useInternalNodes=TRUE)
doc <- htmlTreeParse(fileURL, useInternalNodes=TRUE)
doc <- xmlTreeParse("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata_data_restaurants.xml", useInternalNodes=TRUE)
doc <- htmlTreeParse("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata_data_restaurants.xml", useInternalNodes=TRUE)
doc <- htmlParse("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata_data_restaurants.xml", useInternalNodes=TRUE)
doc <- xmlParse("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata_data_restaurants.xml", useInternalNodes=TRUE)
doc <- xmlInternalTreeParse("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/getdata_data_restaurants.xml", useInternalNodes=TRUE)
doc <- xmlInternalTreeParse("getdata_data_restaurants.xml")
doc <- xmlTreeParse("restaurants.xml")
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][zipcode]
rootNode[[1]]['zipcode']
rootNode[[1]]$zipcode
rootNode[[1]][$zipcode]
xpathSApply(rootNode,"//name",xmlValue)
node[1:3]
length(xmlChildren((node) "zipcode" = 21231)
length(xmlChildren((node) "zipcode" = 21231))
length(xmlChildren((node) "zipcode"))
length(xmlChildren((rootNode) "zipcode"))
length(xmlChildren(rootNode) "zipcode")
length(xmlChildren(rootNode) ["zipcode"])
xmlChildren(rootNode) ["zipcode"]
xmlChildren(doc) ["zipcode"]
xmlChildren(rootNode) zipcode
xmlChildren(rootNode) 'zipcode'
xmlChildren(rootNode) [['zipcode']]
xmlChildren(rootNode) ['zipcode']
xmlName(rootNode)
xmlName(rootNode[1])
xmlName(rootNode[[1]])
length(xmlChildren(rootNode))
sapply(xmlChildren(rootNode), xmlGetAttr, "zipcode")
xmlSapply(xmlChildren(rootNode), xmlGetAttr, "zipcode")
xmlSApply(xmlChildren(rootNode), xmlGetAttr, "zipcode")
xmlSApply(rootNode, xmlGetAttr, "zipcode")
xmlAttrs(doc)
xmlAttrs(rootNode)
xmlName(rootNode)
xmlSize(rootNode)
class(rootNode[[1]][[1]])
rootNode[[1]][[1]]
xmlSApply(rootNode[[1]], xmlName)
xmlSApply(rootNode[[1]], xmlAttrs)
xmlSApply(rootNode[[1]], xmlSize)
class(rootNode[[1]][[1]][[1]])
xmlValue(rootNode[[1]][[1]][[1]])
names(xmlRoot(doc) [["zipcode"]])
names(xmlRoot(doc))
names(xmlRoot(doc) [["row"]])
names(xmlRoot(doc) [["row"]] [["zipcode"]])
rootNode [["row"]][["zipcode"]]
names(rootNode [["row"]][["zipcode"]])
names(rootNode [["row"]])[["zipcode"]]
rootNode [[]][["zipcode"]]
xmlSApply(rootNode [["row"]], xmlSize)
xmlSApply(xmlRoot(doc) [["row"]], xmlSize)
rootNode [["row"]]
rootNode[1:xmlSize(rootNode)][["zipcode"]]
rootNode[1:xmlSize(rootNode)]
rootNode[1:xmlSize(rootNode)][["zipcode"]]
xmlSApply(rootNode[1:xmlSize(rootNode)], xmlSize)
Name
xmlSApply(rootNode[1:xmlSize(rootNode)], xmlName)
xmlSApply(rootNode[[1:xmlSize(rootNode)]], xmlName)
xmlChildren(rootNode[[1]] [c("y", "z"]))
xmlChildren(rootNode[[1]]) [c("y", "z"]
xmlChildren(rootNode) [c("y", "z"]
xmlChildren(rootNode) [c("y", "z")]
xmlChildren(rootNode[[1]]) [c("y", "z")]
xmlChildren(rootNode[[1]]) ["zipcode"]
xmlChildren(rootNode[1:xmlSize(rootNode)]) ["zipcode"]
xmlChildren(rootNode[1:10]) ["zipcode"]
xmlChildren(rootNode[[1:10]]) ["zipcode"]
class(xmlChildren(rootNode[[1]]) ["zipcode"])
class(xmlChildren(rootNode) ["zipcode"])
xmlChildren(rootNode) ["zipcode"]
rootNode["zipcode"]
rootNode[1:10]["zipcode"]
rootNode[[1:10]]["zipcode"]
rootNode[1:10][2]
rootNode[1:10][3]
rootNode[1:10][zipcode == 21224]
rootNode[1:10]["zipcode" == 21224]
rootNode[1:10]["row"]["zipcode" == 21224]
rootNode[1:10]["row"][21224]
rootNode[1:10]["row"]["zipcode"]
rootNode[1:10][6]
names(rootNode[1:10][6])
xmlNames(rootNode[1:10][6])
xmlName(rootNode[1:10][6])
class(rootNode[1:10][6])
class(rootNode[1:10]["zipcode" == 21224])
names(rootNode[1:10]["zipcode" == 21224])
sApply(rootNode[1:10], xmlGetAttr, "zipcode")
sapply(rootNode[1:10], xmlGetAttr, "zipcode")
sapply(rootNode[1:10], xmlValue, "zipcode")
xpathApply(doc, "//zipcode", xmlGetAttr, "zipcode")
docList <- xmlToList(doc)
head(docList)
doclist['zipcode']
docList['zipcode']
docList[['zipcode']]
docList[[1]]
docList[[2]]
names(docList)
doc2 <- xmlParse("restaurants.xml")
docList <- xmlToList(doc2)
docList[1]
names(docList)
length(docList)
names(docList[1:length(docList)])
names(docList[[1:length(docList)])
docList[[1:length(docList)]
]
docList[1:length(docList)]
docList[1:length(docList)]["zipcode"]
docList[1:length(docList)][$row$zipcode]
docList[1:length(docList)]$row$zipcode
docList[,$row$zipcode]
docList[,"zipcode"]
docList[,
zipcode]
docList[,zipcode]
docList[[,"zipcode"]]
docList[[, ]]
docList[[, 1]]
docList[1,2]
docList[1][2]
docList[[1]][2]
docList[[1]][[2]]
docList[[1]]["zipcode"]]
docList[[1]][["zipcode"]]
docList[1:2][["zipcode"]]
docList[[1:2]][["zipcode"]]
docList(c[1:2])[["zipcode"]]
docList[c(1:2)][["zipcode"]]
docList[[2]]["zipcode"]]
docList[[2]][["zipcode"]]
rowCat <- xmlSAppy(rootNode, function (x) xmlSApply(x, xmlValue))
rowCat <- xmlSApply(rootNode, function (x) xmlSApply(x, xmlValue))
t(rowCat)
row_df <- data.frame(t(rowCat), row.names=NULL)
head(row_df)
length(row_df$zipcode == 21231)
row_df$zipcode == 21231
which(row_df$zipcode == 21231)
length(which(row_df$zipcode == 21231))
fread("getdata_data_ss06pid.csv", header=TRUE)
install.packages("fread")
library(fread)
read.csv("getdata_data_ss06pid.csv", header=TRUE)
data<-read.csv("getdata-data-ss06pid.csv", header=TRUE)
dt<- as.data.table(data)
dt<- data.table(data)
library(data.table)
install.packages("data.table")
library(data.table)
dt<- data.table(data)
rowMeans(dt)[dt$SEX==1]; rowMeans(dt)[dt$SEX==2]
tapply(dt$pwgtp15,dt$SEX,mean)
mean(dt$pwgtp15,by=dt$SEX)
mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15)
Sys.time(sapply(split(dt$pwgtp15,dt$SEX),mean))
system.time(sapply(split(dt$pwgtp15,dt$SEX),mean))
sapply(split(dt$pwgtp15,dt$SEX),mean)
dt[,mean(pwgtp15),by=SEX]
rowMeans(dt)[dt$SEX==1]; rowMeans(dt)[dt$SEX==2]
system.time(tapply(dt$pwgtp15,dt$SEX,mean))
system.time(mean(dt$pwgtp15,by=dt$SEX))
system.time(mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15))
system.time({mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15)})
system.time(sapply(split(dt$pwgtp15,dt$SEX),mean))
system.time(dt[,mean(pwgtp15),by=SEX])
system.time(replicate(100, tapply(dt$pwgtp15,dt$SEX,mean)))
system.time({replicate(100, mean(dt$pwgtp15,by=dt$SEX))})
system.time({replicate(100, mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15))})
system.time({replicate(100, {mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15}))})
system.time({replicate(100, {mean(dt[dt$SEX==1,]$pwgtp15);mean(dt[dt$SEX==2,]$pwgtp15)})})
system.time({replicate(100, sapply(split(dt$pwgtp15,dt$SEX),mean)})
system.time({replicate(100, sapply(split(dt$pwgtp15,dt$SEX),mean))})
system.time({replicate(100, sapply(split(dt$pwgtp15,dt$SEX),mean))})
system.time(replicate(100, tapply(dt$pwgtp15,dt$SEX,mean)))
system.time({replicate(100, dt[,mean(pwgtp15),by=SEX])})
system.time({replicate(100, dt[,mean(pwgtp15),by=SEX])})
system.time(replicate(100, tapply(dt$pwgtp15,dt$SEX,mean)))
system.time({replicate(100, mean(dt$pwgtp15,by=dt$SEX))})
system.time({replicate(100, mean(dt$pwgtp15,by=dt$SEX))})
data1<-read.csv("getdata-data-ss06hid.csv", header=TRUE)
data1<-read.csv("getdata-data-ss06hid.csv", header=TRUE)
head(data1)
which(data1$VAL == 24)
length(which(data1$VAL == 24))
data1$FES
install.packages("installr")
install.packages("installr")
install.packages("installr")
library(installr)
updateR()
install.packages("fread")
?fread
library(data.table)
?data.table
??fread
fread
fread("getdata_data_ss06pid.csv", header=TRUE)
fread("ss06pid.csv")
q3 <- fread("ss06pid.csv")
summary(q3)
install.packages("httr")
library(httr)
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE)) -v
openssl
library(openssl)
install.packages("openssl")
library(openssl)
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE)) -v
library(RCurl)
cap <- "https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt"
write_disk("inst/cacert.pem", overwrite = TRUE))
cap <- "https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt"
tf <- tempfile()
savehistory("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/.Rhistory")
library(httr)
GET("https://github.com/bagder/ca-bundle/raw/e9175fec5d0c4d42de24ed6d84a06d504d5e5a09/ca-bundle.crt",
write_disk("inst/cacert.pem", overwrite = TRUE))
load("O:/GIT_Repository/Coursera/DataScience/3 - Get&CleanData/.RData")
?RCurl
??RCurl
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "51701509b744962bbd46",
secret = "432e457d1207203e059ae12c25bc0b0ca4a5f800")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
myapp <- oauth_app("github",
+                    key = "51701509b744962bbd46",
+                    secret = "432e457d1207203e059ae12c25bc0b0ca4a5f800")
oauth2.0_token(oauth_endpoints("github"), myapp)
oauth2.0_token(oauth_endpoints("github"), myapp)
oauth2.0_token(oauth_endpoints("github"), myapp)
oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- '16efa195174397d0f32f'
gtoken <- config(token=github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
edit(sessioninfo)
edit(sessionInfo)
sessionInfo()
curl
library(curl)
library(Curl)
library(cURL)
?cURL
??cURL
RCurl
httr::curl_docs
httr::curl_docs()
httr_options()
httr::curl_docs(url)
httr::curl_docs("url")
?getURL
retVal <- getURL('https://api.github.com/user/repos', httpheader = c(Authorization = 'token 2fd8188881c1019251f7f30da0e9426049fe16be'), ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = c(Authorization = 'token 2fd8188881c1019251f7f30da0e9426049fe16be'), ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = c(Authorization = 'token 2fd8188881c1019251f7f30da0e9426049fe16be'), ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be'), ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be'), ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
retVal <- getURL('https://api.github.com/user/repos', httpheader = 'Authorization: token 2fd8188881c1019251f7f30da0e9426049fe16be', ssl.verifypeer = FALSE, verbose = TRUE)
?file
acs<-file("ss06pid", "r")
acs<-file("ss06pid.csv", "r")
sqldf
library(sqldf)
install.packages("sqldf")
library(sqldf)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs")
?download.file
acs<-download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', ss06pid_1.csv, mode = 'w+')
acs<-download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', mode = 'w+')
acs<-download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', mode = 'w+')
acs<-download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', ss06pid_1.csv, mode = 'w+')
acs<-download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv', 'ss06pid_1.csv', mode = 'w+')
sqldf("select pwgtp1 from acs")
acs<-file("ss06pid.csv")
sqldf("select pwgtp1 from acs")
dbGetQuery(acs, "show databases;")
acs
retUrl <- "http://biostat.jhsph.edu/~jleek/contact.html"
html1 <- GET(retUrl)
content1 <- content(html1,as='text')
parsedHTML <- htmlParse(content1, asText=TRUE)
library(htmlParse)
install.packages("htmlParse")
?htmlParse
??htmlParse
library(XML)
parsedHTML <- htmlParse(content1, asText=TRUE)
?nchar
class(parsedHTML)
con <- url(retUrl)
htmLines<-readLines(con)
htmlLines[1]
htmLines[1]
htmLines[2]
htmLines[3]
nchar(htmLines[10])
nchar(htmLines[20])
nchar(htmLines[30])
nchar(htmLines[100])
close(con)
close(acs)
?scan
zz<-file('getdata-wksst8110.for')
readchar(c(3,10,3))
readchar(zz,c(3,10,3))
readChar(zz,c(3,10,3))
readChar(zz,c(3,10,3))
readChar(zz,c(3,10,3))
x<-read.fwf(zz,skip4,widths=c(12,7,4,9,4,9,4,9,4))
x<-read.fwf(zz,skip=4,widths=c(12,7,4,9,4,9,4,9,4))
readlines(zz, 4)
readLines(zz, 4)
readchar(zz,c(3,10,3))
readChar(zz,c(3,10,3))
zz<-file('getdata-wksst8110.for')
x<-read.fwf(zz,skip=4,widths=c(12,7,4,9,4,9,4,9,4))
head(x)
?sum
sum(x[,4])
close(zz)
unlink('getdata-wksst8110.for')
head(x)
acs
